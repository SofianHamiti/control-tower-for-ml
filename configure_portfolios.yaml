AWSTemplateFormatVersion: 2010-09-09

Description: AWS SC Create a portfolio in Hub/Master and share it with the OUs.

#Parameters:
#  ProdOUToShare:
#    Type: String
#    Description: The Prod OU to share the Prod portfolio with. Format - ou-abcd-12345678
#    AllowedPattern: 'ou-[A-Za-z0-9-]{4}-[A-Za-z0-9-]{8}'
#    ConstraintDescription: Must start with ou- followed by 4 characters '-' 8 characters
#
#  DevOUToShare:
#    Type: String
#    Description: The Dev OU to share the Dev portfolio with. Format - ou-abcd-12345678
#    AllowedPattern: 'ou-[A-Za-z0-9-]{4}-[A-Za-z0-9-]{8}'
#    ConstraintDescription: Must start with ou- followed by 4 characters '-' 8 characters

Mappings:
  S3RefLinks:
    'ProdOUSCProductTemplate':
      Location: 'https://raw.githubusercontent.com/SofianHamiti/control-tower-for-ml/master/fine-grain-policies/product.template.yaml'
    'DevOUSCProductTemplate':
      Location: 'https://raw.githubusercontent.com/SofianHamiti/control-tower-for-ml/master/managed-policies/product.template.yaml'

Resources:
  ProdOUPortfolio:
    Type: AWS::ServiceCatalog::Portfolio
    Properties:
      AcceptLanguage: en
      Description: Sample Portfolio for self service of ML resources in Prod OU
      DisplayName: Self Service ML - Prod OU portfolio
      ProviderName: AWS

  ProdOUSageMakerProduct:
    Type: AWS::ServiceCatalog::CloudFormationProduct
    Properties:
      AcceptLanguage: en
      Description: This product builds an Amazon SageMaker Notebook instance.
      Distributor: AWS
      Name: sagemaker-notebook
      Owner: AWS
      SupportEmail: email@mycompany.com
      SupportUrl: 'https://www.mycompany.com'
      SupportDescription: >-
        This is a sample product taken from https://github.com/SofianHamiti/control-tower-for-ml/tree/master/fine-grain-policies.
      ProvisioningArtifactParameters:
        - Description: This is version 1.0 of Amazon SageMaker Notebook product.
          Name: Version - 1.0
          Info:
            LoadTemplateFromURL: !FindInMap [S3RefLinks, ProdOUSCProductTemplate, Location]

  ProdOUSageMakerProductAssociation:
    DependsOn:
      - ProdOUPortfolio
      - ProdOUSageMakerProduct
    Type: AWS::ServiceCatalog::PortfolioProductAssociation
    Properties:
      AcceptLanguage: en
      PortfolioId: !Ref ProdOUPortfolio
      ProductId: !Ref ProdOUSageMakerProduct

  DevOUPortfolio:
    Type: AWS::ServiceCatalog::Portfolio
    Properties:
      AcceptLanguage: en
      Description: Sample Portfolio for self service of ML resources in Dev OU
      DisplayName: Self Service ML - Dev OU portfolio
      ProviderName: AWS

  DevOUSageMakerProduct:
    Type: AWS::ServiceCatalog::CloudFormationProduct
    Properties:
      AcceptLanguage: en
      Description: This product builds an Amazon SageMaker Notebook instance.
      Distributor: AWS
      Name: sagemaker-notebook
      Owner: AWS
      SupportEmail: email@mycompany.com
      SupportUrl: 'https://www.mycompany.com'
      SupportDescription: >-
        This is a sample product taken from https://github.com/SofianHamiti/control-tower-for-ml/tree/master/fine-grain-policies.
      ProvisioningArtifactParameters:
        - Description: This is version 1.0 of Amazon SageMaker Notebook product.
          Name: Version - 1.0
          Info:
            LoadTemplateFromURL: !FindInMap [S3RefLinks, DevOUSCProductTemplate, Location]

  DevOUSageMakerProductAssociation:
    DependsOn:
      - DevOUPortfolio
      - DevOUSageMakerProduct
    Type: AWS::ServiceCatalog::PortfolioProductAssociation
    Properties:
      AcceptLanguage: en
      PortfolioId: !Ref DevOUPortfolio
      ProductId: !Ref DevOUSageMakerProduct

#  IamRoleLambdaForSC:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#                - lambda.amazonaws.com
#            Action:
#              - sts:AssumeRole
#      Path: /
#      ManagedPolicyArns:
#        - arn:aws:iam::aws:policy/AWSServiceCatalogAdminFullAccess
#        - arn:aws:iam::aws:policy/AWSOrganizationsFullAccess
#        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

#  LambdaExecutePermission:
#    Type: AWS::Lambda::Permission
#    Properties:
#      Action: 'lambda:InvokeFunction'
#      FunctionName: !GetAtt
#        - SCOrganizationNodeShareLambda
#        - Arn
#      Principal: 'cloudformation.amazonaws.com'
#      SourceAccount: !Ref 'AWS::AccountId'

#  SCOrganizationNodeShareLambda:
#    Type: AWS::Lambda::Function
#    DependsOn: IamRoleLambdaForSC
#    Properties:
#      Code:
#        ZipFile: |
#          import json
#          import boto3
#          import botocore
#          import os
#          import cfnresponse
#          import logging
#          LOGGER = logging.getLogger()
#          LOGGER.setLevel(logging.INFO)
#          sc = boto3.client('servicecatalog')
#          org = boto3.client('organizations')
#
#          def get_orgshare_status():
#            OrgShareStatus = 'DISABLED'
#            try:
#              OrgShareStatus = sc.get_aws_organizations_access_status()['AccessStatus']
#            except Exception as e:
#              LOGGER.error('OrgShare Status Fetch Failed :{}'.format(e))
#            return(OrgShareStatus)
#
#          def get_ou_list():
#            ouList = []
#
#            try:
#              orgRoot = org.list_roots()['Roots'][0]['Id']
#            except Exception as e:
#              LOGGER.error('Unable to find org root: {}'.format(e))
#
#            try:
#              for ou in org.list_organizational_units_for_parent(ParentId=orgRoot)['OrganizationalUnits']:
#                ouList.append(ou['Id'])
#            except Exception as e:
#              LOGGER.error('Error getting the OU List: {}'.format(e))
#
#            return(ouList)
#
#          def handler(event, context):
#            listOUs = json.loads(os.environ.get("ListOUs"))
#            print(listOUs)
#            requestType = event['RequestType']
#            response = {
#              "requestType": event['RequestType'],
#              "PortfolioShareToken": "UNKNOWN",
#              "ResponseMetadata": {
#                "RequestId": 'XXXXZXXZ-ZZXX-XZZZ-ZXZZ-ZZXZXXXZXZZZ',
#                "HTTPStatusCode": 400
#              }
#            }
#
#            OrgShareStatus = get_orgshare_status()
#
#            if OrgShareStatus == 'DISABLED':
#              try:
#                LOGGER.info('Enabling OrgShare')
#                sc.enable_aws_organizations_access()
#              except Exception as e:
#                LOGGER.error('Enabling OrgShare Failed:{}'.format(e))
#                response["errorMessage"] = str(e)
#
#            OrgShareStatus = get_orgshare_status()
#            OrgOuList = get_ou_list()
#
#            list_responses = []
#            _ret = {}
#            _ret['Data'] = []
#
#            for portId in listOUs:
#              if OrgShareStatus == 'ENABLED' and listOUs[portId] in OrgOuList and requestType == 'Delete':
#                try:
#                  LOGGER.info('Deletion Initiated:{} - {}'.format(portId, listOUs[portId]))
#                  response = sc.delete_portfolio_share(AcceptLanguage='en', PortfolioId=portId, \
#                            OrganizationNode={'Type':'ORGANIZATIONAL_UNIT', 'Value':listOUs[portId]})
#                except Exception as e:
#                  LOGGER.error('Deletion Failed :{}'.format(e))
#                  response["errorMessage"] = str(e)
#              elif OrgShareStatus == 'ENABLED' and listOUs[portId] in OrgOuList and requestType == 'Create':
#                try:
#                  LOGGER.info('Creation Initiated: {} - {}'.format(portId, listOUs[portId]))
#                  response = sc.create_portfolio_share(AcceptLanguage='en', PortfolioId=portId, \
#                          OrganizationNode={'Type':'ORGANIZATIONAL_UNIT', 'Value':listOUs[portId]})
#                except Exception as e:
#                  LOGGER.error('Creation Failed :{}'.format(e))
#                  response["errorMessage"] = str(e)
#              else:
#                LOGGER.error('UNEXPECTED INPUTS - {}.{}.{}'.format(requestType, OrgShareStatus, listOUs[portId]))
#
#              _ret['Data'].append(response)
#
#              if response['ResponseMetadata']['HTTPStatusCode'] == 200:
#                list_responses.append(200)
#
#            if all(value == 200 for value in list_responses):
#              cfnresponse.send(event, context, cfnresponse.SUCCESS, _ret, None)
#            else:
#              cfnresponse.send(event, context, cfnresponse.FAILED, _ret, None)
#
#      Handler: index.handler
#      Runtime: python3.7
#      MemorySize: 128
#      Role: !GetAtt IamRoleLambdaForSC.Arn
#      Timeout: 30
#      Environment:
#        Variables:
#          ListOUs: !Sub |
#            {
#                "${ProdOUPortfolio}": "${ProdOUToShare}",
#                "${DevOUPortfolio}": "${DevOUToShare}"
#            }

#  OUTriggerLambda:
#    Type: Custom::TriggerLambda
#    DependsOn:
#      - SCOrganizationNodeShareLambda
#      - LambdaExecutePermission
#    Properties:
#      ServiceToken: !GetAtt
#        - SCOrganizationNodeShareLambda
#        - Arn

Outputs:
  ProdOUPortfolioId:
    Description: Prod OU Portfolio Id
    Value: !Ref ProdOUPortfolio
#  ProdOUUnitId:
#    Description: Prod OU Shared
#    Value: !Ref ProdOUToShare
  DevOUPortfolioId:
    Description: Dev OU Portfolio Id
    Value: !Ref DevOUPortfolio
#  DevOUUnitId:
#    Description: Dev OU Shared
#    Value: !Ref DevOUToShare
